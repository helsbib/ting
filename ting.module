<?php
/**
 * @file
 * Module to integrate the Ting search engine with a Drupal site.
 */

/**
 * Implementation of hook_menu().
 */
function ting_menu() {
  $path = drupal_get_path('module', 'ting') . '/includes';
  $items = array();

  $items['ting/object/redirect'] = array(
    'title' => 'Redirect to object based on local ID (links from bibliotek.dk).',
    'page callback' => 'ting_search_pages_object_redirect',
    'access arguments' => array('search content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting.pages.inc',
    'file path' => $path,
  );

  $items['admin/settings/ting'] = array(
    'title' => 'Ting search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
  );

  $items['admin/settings/ting/access'] = array(
    'title' => 'Ting access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/ting/ranking'] = array(
    'title' => 'Ranking',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ranking_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/ting/boost'] = array(
    'title' => 'Boost',
    'description' => 'Enable the user to boost specific values for specific fields in search results.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_boost_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
    'type' => MENU_LOCAL_TASK,
  );

  $items['ting/ranking_field/ahah'] = array(
    'title' => 'Ting ranking field AHAH callback',
    'title callback' => FALSE,
    'page callback' => 'ting_admin_ranking_add_field_ahah',
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
    'type' => MENU_CALLBACK,
  );

  $items['ting/boost_field/ahah'] = array(
    'title' => 'Ting boost field AHAH callback',
    'title callback' => FALSE,
    'page callback' => 'ting_admin_boost_add_field_ahah',
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_elements().
 *
 * Define a new form element named ting_ranking_field.
 *
 * It calls the theme function theme_ting_ranking_field, if not defined
 * no elements will be displayed.
 */
function ting_elements() {
  return array(
    'ting_boost_field' => array(
      '#input' => TRUE,
      '#process' => array('ting_boost_field_element_process'),
    ),
    'ting_ranking_field' => array(
      '#input' => TRUE,
      '#process' => array('ting_ranking_field_element_process'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function ting_theme() {
  return array(
    'ting_thing' => array(
      'arguments' => array('type' => 'object', 'object' => NULL, 'query_args' => NULL),
      'file' => 'ting.theme.inc',
    ),
    'ting_list' => array(
      'arguments' => array('ting_list' => NULL, 'sorted' => FALSE),
      'template' => 'ting-list',
      'file' => 'ting.theme.inc',
    ),
    'ting_list_item' => array(
      'arguments' => array('object' => NULL),
      'template' => 'ting-list-item',
      'file' => 'ting.theme.inc',
    ),
    'ting_tabs' => array(
      'arguments' => array('tabs' => NULL, 'wrapper_id' => NULL),
      'template' => 'ting-tabs',
      'file' => 'ting.theme.inc',
    ),
    'ting_collection' => array(
      'arguments' => array('collection' => NULL, 'query_args' => NULL),
      'template' => 'ting_collection',
      'file' => 'ting.theme.inc',
    ),
    'ting_object' => array(
      'arguments' => array('object' => NULL),
      'template' => 'ting_object',
      'file' => 'ting.theme.inc',
    ),
    'ting_object_title' => array(
      'arguments' => array('object' => NULL, 'display_image' => NULL),
      'template' => 'ting-object-title',
      'file' => 'ting.theme.inc',
    ),
    'ting_ranking_field' => array(
      'arguments' => array('element' => NULL),
    ),
    'ting_boost_field' => array(
      'arguments' => array('element' => NULL),
      'file' => 'ting.theme.inc',
    ),
    'ting_details' => array(
      'arguments' => array('details' => NULL),
      'file' => 'ting.theme.inc',
    ),
    'ting_details_group' => array(
      'arguments' => array('title' => NULL, 'group' => NULL),
      'file' => 'ting.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ting_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ting_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_imagecache_default_presets()
 */
function ting_imagecache_default_presets() {
  $presets = array();

  $presets['180_x'] = array (
    'presetname' => '180_x',
    'actions' =>
    array (
      0 =>
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' =>
        array (
          'width' => '180',
          'height' => '',
          'upscale' => 0,
        ),
      ),
    ),
  );

  $presets['80_x'] = array (
    'presetname' => '80_x',
    'actions' =>
    array (
      0 =>
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' =>
        array (
          'width' => '80',
          'height' => '',
          'upscale' => 1,
        ),
      ),
    )
  );

  return $presets;
}

/**
 * Implementation of hook_ting_add_js().
 */
function ting_ting_add_js($type) {
  // Add button helper on collection and object views if the required jQuery UI modules are loaded
  // These are not requirements to avoid unecessary dependencies in ting module
  if (in_array($type, array('ting_collection_view', 'ting_object_view'))) {
    if (module_exists('jquery_ui') && module_exists('jquery_ui_theme')) {
      jquery_ui_add('ui.dialog');
      jquery_ui_theme_load();
      drupal_add_js(drupal_get_path('module', 'ting') . '/js/ting.buttons.js');
    }
  }
}

/**
 * Implementation of hook_ting_object_buttons().
 */
function ting_ting_object_buttons($object) {
  if (!empty($object->localId)) {
    if (!empty($object->online_url) &&
      ting_object_is($object, 'online')) {
      // TODO: Consider new ting object class: audible
      if (in_array(drupal_strtolower($object->type), array('lydbog (net)', 'musik (net)',
                                                           'lydbog (online)', 'netmusik (album)' /* Included to ensure backwards compatability with DKABM 1.x */
                                                     ))) {
        $text = t('Hear online');
      }
      else {
        $text = t('See online');
      }
      return array(
        array(
          'data' => l($text, $object->online_url),
          'class' => 'view-online',
        )
      );
    }
  }
}

/**
 * Implementation of hook_trampoline_variables().
 */
function ting_trampoline_variables() {
  return array(
    'ting_agency',
    'ting_search_url',
    'ting_scan_url',
    'ting_spell_url',
    'ting_recommendation_server',
  );
}

/**
 * Menu loader function.
 */
function ting_id_load($id) {
  module_load_include('client.inc', 'ting');
  return ting_get_object_by_id($id);
}

/**
 * Menu loader function.
 */
function ting_local_id_load($id) {
  module_load_include('client.inc', 'ting');
  return ting_get_object_by_local_id($id);
}

/**
 * Add additional information to a ting object.
 */
function ting_enrich_object(&$object) {
  $object = array_shift(ting_add_additional_info(array($object)));
}

/**
 * Parse a string containing search query arguments into an array
 * @return array Array of search query arguments
 */
function _ting_search_parse_query_args($query_string) {
  $query_args = array();

  $query_elements = explode(';', $query_string);
  foreach ($query_elements as &$e) {
    $e = explode(':', $e, 2);
    if (strpos($e[1], ':') !== FALSE) {
      $query_args[$e[0]] = array();
      $e_args = explode(':', $e[1], 2);
      $query_args[$e[0]][$e_args[0]] = $e_args[1];
    } else {
      $query_args[$e[0]] = $e[1];
    }
  }

  return $query_args;
}

/**
 * Return whether an object is of a given pseudo-class.
 *
 * Modules can add their own pseudo-classes by implementing
 * hook_ting_object_is(). This function will call all implementations and
 * return the overall result.
 *
 * Modules may return TRUE, FALSE or NULL from the hook. If any modules
 * returned FALSE, the result is FALSE, else the result is TRUE if anyone
 * returned TRUE, FALSE otherwise.
 */
function ting_object_is($object, $class) {
  $result = module_invoke_all('ting_object_is', $object, $class);
  // Return true if anyone returned true, and nobody returned false.
  if (!in_array(FALSE, $result) && in_array(TRUE, $result)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_ting_object_is().
 */
function ting_ting_object_is($object, $class) {
  // Known online types.
  if ($class == 'online') {
    $online_types = array('avis (net)', 'film (net)', 'lydbog (net)', 'musik (net)', 'ebog', 'periodikum (net)', 'pc-spil (net)', 'tidsskrift (net)', 'netdokument',
                          'avisartikel', 'tidsskriftsartikel', 'artikel', 'anmeldelse', 'avis (net)', 'tidsskrift (net)',
                          'lydbog (online)', 'netmusik (album)' /* Included to ensure backwards compatability with DKABM 1.x */);
    if (in_array(drupal_strtolower($object->type), $online_types)) {
      return TRUE;
    }
  }
}

/**
 * Processor for the ting_ranking_field form element.
 */
function ting_ranking_field_element_process($element, $form_state) {
  $element['#tree'] = TRUE;

  $element['field_type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#options' => array(
      'phrase' => t('Phrase'),
      'word' => t('Word'),
    ),
    '#default_value' => $element['#value']['field_type'],
  );

  $element['field_name'] = array(
    '#title' => t('Field name'),
    '#type' => 'select',
    '#options' => array(
      '' => '- ' . t('Choose') . ' -',
      'ac.source' => t('Source'),
      'dc.title' => t('Title'),
      'dc.creator' => t('Author'),
      'dc.subject' => t('Subject'),
      'dc.date' => t('Year of publish'),
      'dc.type' => t('Material type'),
    ),
    '#default_value' => $element['#value']['field_name'],
    '#attributes' => array('class' => 'field-name'),
  );

  $element['weight'] = array(
    '#title' => t('Weight'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 10)),
    '#default_value' => $element['#value']['weight'],
  );

  return $element;
}


/**
 * Processor for the ting_boost_field form element.
 */
function ting_boost_field_element_process($element, $form_state) {
  $element['#tree'] = TRUE;
  $element['#prefix'] = '<div class="ting-boost-field-element clearfix">';
  $element['#suffix'] = '</div>';

  $element['field_name'] = array(
    '#title' => t('Field name'),
    '#type' => 'select',
    '#options' => array(
      '' => '- ' . t('Choose') . ' -',
      'ac.source' => t('Source'),
      'dc.creator' => t('Author'),
      'dc.date' => t('Year of publish'),
      'dc.language' => t('Language'),
      'dc.type' => t('Material type'),
      'dc.identifier' => t('ISBN number'),
    ),
    '#default_value' => (isset($element['#value']['field_name'])) ? $element['#value']['field_name'] : NULL,
    '#attributes' => array('class' => array('field-name')),
  );

  $element['field_value'] = array(
    '#title' => t('Value'),
    '#type' => 'textfield',
    '#default_value' => (isset($element['#value']['field_value'])) ? $element['#value']['field_value'] : NULL,
  );

  $element['weight'] = array(
    '#title' => t('Weight'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 10)),
    '#default_value' => (isset($element['#value']['weight'])) ? $element['#value']['weight'] : NULL,
  );

  return $element;
}

/**
 * Theme function to format the custom form element ting_boost_field.
 */
function theme_ting_boost_field($element) {
  return theme('form_element', $element, '<div class="boost-field-instance clear-block">'. $element['#children'] .'</div>');
}

/**
 * Utility function.
 * Converts an ISO639-2 language code to ISO639-1
 *
 * @param @lang_code
 * (String) An ISO639-2 language code.
 *
 * @return An ISO639-1 language code or NULL if no conversion could be made.
 */
function ting_language_convert($lang_code) {
  $languages = array(
    'abk' => 'ab',
    'aar' => 'aa',
    'afr' => 'af',
    'aka' => 'ak',
    'sqi' => 'sq',
    'amh' => 'am',
    'ara' => 'ar',
    'arg' => 'an',
    'hye' => 'hy',
    'asm' => 'as',
    'ava' => 'av',
    'ave' => 'ae',
    'aym' => 'ay',
    'aze' => 'az',
    'bam' => 'bm',
    'bak' => 'ba',
    'eus' => 'eu',
    'bel' => 'be',
    'ben' => 'bn',
    'bih' => 'bh',
    'bis' => 'bi',
    'bos' => 'bs',
    'bre' => 'br',
    'bul' => 'bg',
    'mya' => 'my',
    'cat' => 'ca',
    'cha' => 'ch',
    'che' => 'ce',
    'nya' => 'ny',
    'zho' => 'zh',
    'chv' => 'cv',
    'cor' => 'kw',
    'cos' => 'co',
    'cre' => 'cr',
    'hrv' => 'hr',
    'ces' => 'cs',
    'dan' => 'da',
    'div' => 'dv',
    'nld' => 'nl',
    'dzo' => 'dz',
    'eng' => 'en',
    'epo' => 'eo',
    'est' => 'et',
    'ewe' => 'ee',
    'fao' => 'fo',
    'fij' => 'fj',
    'fin' => 'fi',
    'fra' => 'fr',
    'ful' => 'ff',
    'glg' => 'gl',
    'kat' => 'ka',
    'deu' => 'de',
    'ell' => 'el',
    'grn' => 'gn',
    'guj' => 'gu',
    'hat' => 'ht',
    'hau' => 'ha',
    'heb' => 'he',
    'her' => 'hz',
    'hin' => 'hi',
    'hmo' => 'ho',
    'hun' => 'hu',
    'ina' => 'ia',
    'ind' => 'id',
    'ile' => 'ie',
    'gle' => 'ga',
    'ibo' => 'ig',
    'ipk' => 'ik',
    'ido' => 'io',
    'isl' => 'is',
    'ita' => 'it',
    'iku' => 'iu',
    'jpn' => 'ja',
    'jav' => 'jv',
    'kal' => 'kl',
    'kan' => 'kn',
    'kau' => 'kr',
    'kas' => 'ks',
    'kaz' => 'kk',
    'khm' => 'km',
    'kik' => 'ki',
    'kin' => 'rw',
    'kir' => 'ky',
    'kom' => 'kv',
    'kon' => 'kg',
    'kor' => 'ko',
    'kur' => 'ku',
    'kua' => 'kj',
    'lat' => 'la',
    'ltz' => 'lb',
    'lug' => 'lg',
    'lim' => 'li',
    'lin' => 'ln',
    'lao' => 'lo',
    'lit' => 'lt',
    'lub' => 'lu',
    'lav' => 'lv',
    'glv' => 'gv',
    'mkd' => 'mk',
    'mlg' => 'mg',
    'msa' => 'ms',
    'mal' => 'ml',
    'mlt' => 'mt',
    'mri' => 'mi',
    'mar' => 'mr',
    'mah' => 'mh',
    'mon' => 'mn',
    'nau' => 'na',
    'nav' => 'nv',
    'nob' => 'nb',
    'nde' => 'nd',
    'nep' => 'ne',
    'ndo' => 'ng',
    'nno' => 'nn',
    'nor' => 'no',
    'iii' => 'ii',
    'nbl' => 'nr',
    'oci' => 'oc',
    'oji' => 'oj',
    'chu' => 'cu',
    'orm' => 'om',
    'ori' => 'or',
    'oss' => 'os',
    'pan' => 'pa',
    'pli' => 'pi',
    'fas' => 'fa',
    'pol' => 'pl',
    'pus' => 'ps',
    'por' => 'pt',
    'que' => 'qu',
    'roh' => 'rm',
    'run' => 'rn',
    'ron' => 'ro',
    'rus' => 'ru',
    'san' => 'sa',
    'srd' => 'sc',
    'snd' => 'sd',
    'sme' => 'se',
    'smo' => 'sm',
    'sag' => 'sg',
    'srp' => 'sr',
    'gla' => 'gd',
    'sna' => 'sn',
    'sin' => 'si',
    'slk' => 'sk',
    'slv' => 'sl',
    'som' => 'so',
    'sot' => 'st',
    'spa' => 'es',
    'sun' => 'su',
    'swa' => 'sw',
    'ssw' => 'ss',
    'swe' => 'sv',
    'tam' => 'ta',
    'tel' => 'te',
    'tgk' => 'tg',
    'tha' => 'th',
    'tir' => 'ti',
    'bod' => 'bo',
    'tuk' => 'tk',
    'tgl' => 'tl',
    'tsn' => 'tn',
    'ton' => 'to',
    'tur' => 'tr',
    'tso' => 'ts',
    'tat' => 'tt',
    'twi' => 'tw',
    'tah' => 'ty',
    'uig' => 'ug',
    'ukr' => 'uk',
    'urd' => 'ur',
    'uzb' => 'uz',
    'ven' => 've',
    'vie' => 'vi',
    'vol' => 'vo',
    'wln' => 'wa',
    'cym' => 'cy',
    'wol' => 'wo',
    'fry' => 'fy',
    'xho' => 'xh',
    'yid' => 'yi',
    'yor' => 'yo',
    'zha' => 'za',
    'zul' => 'zu',
  );
  return !empty($languages[$lang_code]) ? $languages[$lang_code] : NULL;
}
